syntax = "proto3";
option optimize_for = SPEED;

message Credentials {
  uint32 userId = 1;
  string userName = 2;
  fixed64 passwordHash = 3;

  fixed64 lastLogin = 4;
}

// BaseEntity containing common information among data holders
message BaseEntity {
  uint64 id = 1;
  uint64 lastChangeTime = 2;  // Used to check if there are new updates, much
                              // faster than comparing single entities.
  // FIXME: Doesn't need to be transmitted, only the lastUpdateRequestTime
  // should be saved on client side
  // FIXME: Data integrity, if two updates were done at the same time, but only
  // one was received (very rare)
  Status status =
      3;  // Contains Status of last change to deliver the right Data subscribe

  enum Status {
    add = 0;
    edit = 1;    // TODO: Edit or update?
    remove = 2;  // TODO: Remove or delete?
  }
}

message Group {
  BaseEntity baseEntity = 1;
  Type type = 2;

  bytes icon = 2;  // Optional: Project's and School's may use an icon
  string name = 3;
  string description =
      4;  // Optional: Project's and School's may use a description
  string password = 5;  // Optional: Just for School groups

  uint64 subgroupOf =
      6;  // Optional: Every Course and Project is a subgroup of a School
  // TODO: Clustered subgroup system for Course's and Project's to create
  // real-world structure (n-m relationship)
  enum Type {
    School = 0;
    Course = 1;
    Project = 2;
  }
}

message UserGroup {
  BaseEntity baseEntity = 1;
  Group.Type type = 2;

  uint64 userId = 3;
  uint64 groupId = 4;

  enum Permission {
    Creator = 0;  // Admin permissions AND: Can add and remove Admin permissions
                  // and kick everyone. A random Admin(Member if none available)
                  // is given the Creator Permission when he exits.
    Admin = 1;    // Member permissions AND: Can accept join requests and create
                  // tasks and appointments. Was set as Admin by the Creator.
    Member = 2;   // Can view stuff and chat, but nothing else. Join request was
                  // accepted by an Admin or above.
  }
}

message User {
  BaseEntity baseEntity = 1;

  string userName = 2;
  string firstName = 3;
  string lastName = 4;
}

message Event {
  BaseEntity baseEntity = 1;

  uint64 groupId = 2;

  string subject = 3;
  string description = 4;
  fixed64 date = 5;
}

message Lesson {
  BaseEntity baseEntity = 1;

  uint64 groupId = 2;

  string name = 3;
  uint32 time = 4;  // Contains hour and dayOfWeek
}

message Conversation {
  BaseEntity baseEntity = 1;

  oneof participants {
    uint64 groupId = 2;
    uint64 userId = 3;
  }
}

message Message {
  BaseEntity baseEntity = 1;

  uint64 conversationId = 2;
  uint64 senderId = 3;

  bytes image = 4;
  string message = 5;
}